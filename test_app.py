#!/usr/bin/env python3
# test_app.py - Script de prueba para verificar funcionalidades b√°sicas

import sys
import os
import tempfile

# Agregar el directorio actual al path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """Prueba que todas las importaciones funcionen"""
    print("üß™ Probando importaciones...")
    
    try:
        import tkinter as tk
        print("‚úÖ tkinter - OK")
    except ImportError as e:
        print(f"‚ùå tkinter - FALLO: {e}")
        return False
    
    try:
        import requests
        print("‚úÖ requests - OK")
    except ImportError as e:
        print(f"‚ùå requests - FALLO: {e}")
        return False
    
    try:
        import pystray
        print("‚úÖ pystray - OK")
    except ImportError as e:
        print(f"‚ùå pystray - FALLO: {e}")
        return False
    
    try:
        from PIL import Image, ImageDraw
        print("‚úÖ Pillow - OK")
    except ImportError as e:
        print(f"‚ùå Pillow - FALLO: {e}")
        return False
    
    try:
        from zk import ZK
        print("‚úÖ zk (zklib) - OK")
    except ImportError as e:
        print(f"‚ùå zk (zklib) - FALLO: {e}")
        print("   Instala con: pip install pyzk")
        return False
    
    return True

def test_config_functions():
    """Prueba las funciones de configuraci√≥n"""
    print("\nüß™ Probando funciones de configuraci√≥n...")
    
    try:
        # Importar las funciones del script principal
        from sincronizador_biometrico_mejorado import load_config, save_config, config_data
        
        # Probar carga y guardado
        load_config()
        print("‚úÖ load_config() - OK")
        
        # Modificar configuraci√≥n temporalmente
        original_ip = config_data.get('IP_BIOMETRICO')
        config_data['IP_BIOMETRICO'] = '192.168.1.99'
        
        save_config()
        print("‚úÖ save_config() - OK")
        
        # Restaurar configuraci√≥n original
        config_data['IP_BIOMETRICO'] = original_ip
        save_config()
        
        return True
    except Exception as e:
        print(f"‚ùå Funciones de configuraci√≥n - FALLO: {e}")
        return False

def test_network_functions():
    """Prueba las funciones de red b√°sicas"""
    print("\nüß™ Probando funciones de red...")
    
    try:
        from sincronizador_biometrico_mejorado import test_ping, test_tcp_port
        
        # Probar ping a localhost
        success, message = test_ping('127.0.0.1', timeout=2)
        if success:
            print("‚úÖ test_ping() - OK")
        else:
            print(f"‚ö†Ô∏è test_ping() - Sin ping pero funci√≥n OK: {message}")
        
        # Probar puerto TCP (puerto que probablemente est√© cerrado)
        success, message = test_tcp_port('127.0.0.1', 9999, timeout=2)
        print(f"‚úÖ test_tcp_port() - OK (resultado: {message})")
        
        return True
    except Exception as e:
        print(f"‚ùå Funciones de red - FALLO: {e}")
        return False

def test_logging_setup():
    """Prueba el sistema de logging"""
    print("\nüß™ Probando sistema de logging...")
    
    try:
        from sincronizador_biometrico_mejorado import setup_logging
        import logging
        
        logger = setup_logging()
        logger.info("Prueba de logging - mensaje de informaci√≥n")
        logger.warning("Prueba de logging - mensaje de advertencia")
        
        # Verificar que se cre√≥ el directorio de logs
        if os.path.exists('logs'):
            print("‚úÖ Directorio de logs creado - OK")
        else:
            print("‚ö†Ô∏è Directorio de logs no encontrado")
        
        # Verificar que se cre√≥ el archivo de log
        if os.path.exists('logs/biometrico_sync.log'):
            print("‚úÖ Archivo de log creado - OK")
        else:
            print("‚ö†Ô∏è Archivo de log no encontrado")
        
        print("‚úÖ Sistema de logging - OK")
        return True
    except Exception as e:
        print(f"‚ùå Sistema de logging - FALLO: {e}")
        return False

def test_ui_creation():
    """Prueba la creaci√≥n de la interfaz (sin mostrarla)"""
    print("\nüß™ Probando creaci√≥n de interfaz...")
    
    try:
        import tkinter as tk
        from sincronizador_biometrico_mejorado import SyncBioApp
        
        # Crear ventana ra√≠z
        root = tk.Tk()
        root.withdraw()  # Ocultar la ventana
        
        # Crear la aplicaci√≥n
        app = SyncBioApp(root)
        
        # Verificar que se crearon algunos componentes b√°sicos
        if hasattr(app, 'ip_var') and hasattr(app, 'status_var'):
            print("‚úÖ Variables de interfaz creadas - OK")
        
        if hasattr(app, 'log_text'):
            print("‚úÖ Widget de log creado - OK")
        
        # Destruir la ventana
        root.destroy()
        
        print("‚úÖ Creaci√≥n de interfaz - OK")
        return True
    except Exception as e:
        print(f"‚ùå Creaci√≥n de interfaz - FALLO: {e}")
        return False

def main():
    """Funci√≥n principal de pruebas"""
    print("=" * 60)
    print("   PRUEBAS DEL SINCRONIZADOR BIOM√âTRICO MEJORADO")
    print("=" * 60)
    
    tests = [
        ("Importaciones", test_imports),
        ("Configuraci√≥n", test_config_functions),
        ("Funciones de Red", test_network_functions),
        ("Sistema de Logging", test_logging_setup),
        ("Creaci√≥n de Interfaz", test_ui_creation),
    ]
    
    passed = 0
    total = len(tests)
    
    for name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                print(f"‚ùå {name} - FALL√ì")
        except Exception as e:
            print(f"‚ùå {name} - ERROR: {e}")
    
    print("\n" + "=" * 60)
    print(f"   RESULTADOS: {passed}/{total} pruebas pasaron")
    print("=" * 60)
    
    if passed == total:
        print("üéâ ¬°Todas las pruebas pasaron! La aplicaci√≥n est√° lista para usar.")
        return True
    else:
        print("‚ö†Ô∏è Algunas pruebas fallaron. Revisa los errores arriba.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
